plugins {
    id("java")
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
}

version '1.0'

sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main.java.srcDirs = ["src"]

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories{
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this plugin is made for
    mindustryVersion = 'v147.1'
    jabelVersion = "93fde537c7"
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    //implementation(files("postgresql-42.7.5.jar"))
    implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    implementation 'com.discord4j:discord4j-core:3.2.7'
    //implementation 'org.postgresql:postgresql:42.7.5'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:2.0.10"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:2.0.10"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jsr223:2.0.10"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:2.0.10"
    implementation 'org.reflections:reflections:0.10.2'
}

jar{
    archiveFileName = "${project.archivesBaseName}.jar"
    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }
    manifest {
        attributes(
                'Main-Class': 'main.java.Main'
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("$buildDir/javadoc")
}
compileKotlin {
}
def gitHash = 'git rev-parse --short HEAD'.execute().text.trim()
def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss")
def buildVersion = "${System.currentTimeMillis()}-${gitHash}"

task generateBuildInfo {
    def outputDir = file("$buildDir/generated/sources/buildInfo")
    outputs.dir outputDir

    doLast {
        def packageDir = new File(outputDir, "main/java/main/java/")
        packageDir.mkdirs()
        def file = new File(packageDir, "BuildInfo.java")
        file.text = """
            package main.java;

            public class BuildInfo {
                public static final String VERSION = "${buildVersion}";
                public static final String BUILD_TIME = "${buildTime}";
                public static final String GIT_HASH = "${gitHash}";
                public static final String mindustry_version = "${mindustryVersion}";
            }
        """.stripIndent()
    }
}
tasks.withType(ProcessResources) {
    from('sprites') {
        include '**/*'
        into 'sprites'
    }
}
compileJava.dependsOn(generateBuildInfo)
compileKotlin.dependsOn(generateBuildInfo)
sourceSets.main.java.srcDirs += "$buildDir/generated/sources/buildInfo/main/java"
compileJava.options.forkOptions.jvmArgs += [
        '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports=java.base/sun.reflect.annotation=ALL-UNNAMED'
]
